#!/bin/bash

# Stochastic simulator for zebrafish segmentation
# Copyright (C) 2012 Ahmet Ay, Jack Holland, Adriana Sperlea

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# $1 = directory name of the parameter set to process
# $2 = either "all" or a run number for which to process the data
# $3 = either "all" or a mutation for which to process the data (wt, her1, her7, her13, her713, delta)
# for $4...$n:
# -i or --images produces image files for each timestep
# -m or --movie produces a movie from the images files (will create the images if they don't already exist)
# -p or --plot produces an image of the plots for all cells and an image of the plot for their average
# -h or --heat produces heat maps for the period and amplitude
# -q or --quiet hides output messages, making the processing scripts run without printing anything to the terminal
# short-form options can be combined like "-smp" or separated like "-s -m -p" or any combination of the two, but long-form must be separated

# this function prints out how to use this script and then exits
function usage () {
	echo "Usage: analyze-run <directory name of the parameter to process> <run number> <mutation> [-option[option]...]... [--option]..."
	exit 0
}

# this function echoes with the given arguments if the hide feature (-q or --quiet) is not turned on
function echo () {
	if [ $quiet -eq 0 ]; then
		command echo "$1" "$2"
	fi
}

function heatmap () {
	if [ $heat -eq 1 ]; then
		if [ $3 == all ]; then
			hm $1 $2 wt
			hm $1 $2 her1
			hm $1 $2 her7
			hm $1 $2 her13
			hm $1 $2 her713
			hm $1 $2 delta
		else
			hm $1 $2 $3
		fi
	fi
}

function hm () {
    echo -n "Creating heatmaps for the period and amplitude of this parameter set ... "
    python analysis/heatmaps.py $par/$3 $1 $2 "period.txt" $par/$3/period_${3}.png 20 40
    python analysis/heatmaps.py $par/$3 $1 $2 "amplitude.txt" $par/$3/amplitude_${3}.png 0 200
	echo "Done"
}

function process_run () {
# $1 run directory
	
	process_mutation wt $1
	process_mutation her1 $1
	process_mutation her7 $1
	process_mutation her13 $1
	process_mutation her713 $1
	process_mutation delta $1
}

function process_mutation () {
# $1 mutation directory
# $2 run directory
	
	echo "Processing $1 $2 ..."
	
	if [ $images -eq 1 ] || ([ $movie -eq 1 ] && [ ! -d $par/$1/$2/images ]); then
		echo -n "Creating images for each timestep in $par/$1/$2/images/image####.tiff ... "
		python analysis/tissue-snapshots.py $par/$1/$2/${2}.txt $par/$1/$2/images
		echo "Done"
	fi
	
	if [ $movie -eq 1 ]; then
		echo -n "Producing a movie from the images in $par/$1/$2/images ... "
		ffmpeg -y -qscale 5 -r 20 -b 9600 -i $par/$1/$2/images/%04d.tiff $par/$1/$2/movie_$1.mp4
		echo "Done"
	fi
	
	if [ $plot -eq 1 ]; then
		echo -n "Plotting each cell and their average in $par/$1/$2/plots/${1}_her1_allcells.png and $par/$1/$2/plots/${1}_her1_avg.png ... "
		python analysis/plot.py $par/$1/$2/${2}.txt $par/$1/$2/plots "her1 mRNa" $1
		echo "Done"
	fi

	echo "Done processing"
}

quiet=0

if [ $# -lt 3 ] || [ ! -d $1 ]; then
	usage
fi

images=0
movie=0
plot=0
heat=0
for (( i=4; i<=$#; i++ ))
do
	arg=${!i}
	if [ ${arg:0:1} == "-" ]; then
		if [ ${arg:1:1} == "-" ]; then
			if [ $arg == "--images" ]; then
				images=1
			elif [ $arg == "--movie" ]; then
				movie=1
			elif [ $arg == "--plot" ]; then
				plot=1
			elif [ $arg == "--heat" ]; then
				heat=1
			elif [ $arg == "--quiet" ]; then
				quiet=1
			else
				usage
			fi
		else
			arg=${arg:1}
			len=${#arg}
			if [ $len -eq 0 ]; then
				usage
			fi
			for (( j=0; j<$len; j++ ))
			do
				option=${arg:0:1}
				if [ $option == "i" ]; then
					images=1
				elif [ $option == "m" ]; then
					movie=1
				elif [ $option == "p" ]; then
					plot=1
				elif [ $option == "h" ]; then
					heat=1
				elif [ $option == "q" ]; then
					quiet=1
				else
					usage
				fi
				arg=${arg:1}
			done
		fi
	else
		usage
	fi
done

par="$1"

# fix directory structure for analysis if necessary
for run in `dir -d $par/*/*`; do
	if [[ $run =~ .*/run[0-9]*.txt ]]; then
		rname=${run%*.txt}
		mkdir $rname
		mv $run $rname/${run##*/}
	fi
done

# run analysis on the specified runs
if [ $2 == all ]; then
	runs=0
	for run in `dir -d $par/wt/*`; do
		if [ -d $run ] && [[ $run =~ .*/run[0-9]* ]]; then
			rdir=${run##*/}
			if [ $3 == all ]; then
				process_run $rdir
			else
				process_mutation $3 $rdir
			fi
		fi
	done
	heatmap 0 $runs $3
else
	run=run$2
	if [ $3 == all ]; then
		process_run $run
	else
		process_mutation $3 $run
	fi
	heatmap $2 $(($2+1)) $3
fi

